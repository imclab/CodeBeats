*Add new items at the top*

TODO: add some information and/or FAQ about CodeBeats
- purpose, how to use, links to JS API files on github

TODO: prepare some code examples, with share-able links

TODO: play with Chrome MIDI API
  https://dvcs.w3.org/hg/audio/raw-file/tip/midi/specification.html
- Way to map input events to track
- Do nothing if API not supported
- Default behaviors for vanalog, mixer

TODO: write JS/server code to interface with gist sharing system

TODO: fix drum sample mapping in drum kit
- If people make pieces depending on this mapping, breaking it would be bad!
- Remove sample-list

TODO: Code->Beats logo

TODO: Add FAQ, Tutorial links

TODO: spectrogram node








[DONE] TODO: live coding shell box
- Can we use CodeMirror for this?
- Just implement basic REPL, don't worry about layout

(11:32:52 PM) Mot Low: I just want to be able to type some code that will play some chords on a piano with a given timing repeatedly
(11:33:09 PM) Mot Low: and then be able to say, ok now start playing this on drums
(11:33:19 PM) Mot Low: and then while both are running tweak them
(11:33:33 PM) Mot Low: once we get that we can start building on sorts of neat stuff on top
(11:33:52 PM) Mot Low: in terms of api theres a ton of stuff we could add
(11:34:22 PM) Mot Low: specifying individual notes to play, or chord patterns
(11:34:32 PM) Mot Low: or even stuff like "play this progression starting with this chord"

[DONE] TODO: note killing mechanism for FnInstr

[DONE] TODO: graph, find all nodes from output node, remove need to add to graph

[DONE] TODO: instrument from sample-producing function => FunInstr

    var fInstr = addNode(new FnInstr(
	    function (f, t, s)
      	{
        	var amp = 1 / Math.sqrt(1.5 * (t - s.onTime));
        	return amp * Math.sin(t * f * 2 * Math.PI);
      	}
    ));

    mixer.connect(fInstr.output);
    var fTrack = newTrack(fInstr);
    makeNotes(fTrack, 0, 'C4,C4,E4,C4,G3,G3,F3');

[DONE] TODO: makeNotes string notation, support blank spots for pauses

[DONE] TODO: shaded play/stop/pause buttons to reflect current state
- Use the disabled button attribute!

[DONE] TODO: makeNotes function taking string or array
- makeNotes(track, notes, noteLen, breakSeq)

[DONE] TODO: implement pause button

[DONE] TODO: integrate audio code with UI code

[DONE] TODO: CodeMirror saving across sessions in browser db

[DONE] TODO: Add "Fork me on GitHub" link

[DONE] TODO: create initial page design with CodeMirror view
- "Run", "Mute" buttons

[DONE] TODO: create drum kit sampler with initial sample bank

[DONE] TODO: synth piano instrument, call "piano", connect to mixer

[DONE] TODO: simple global API, easyaudio.js
- newTrack()
- addNode()
- makeNote()

[DONE] TODO: rename synthNet to audioGraph

[DONE] TODO: import MusicToy code

